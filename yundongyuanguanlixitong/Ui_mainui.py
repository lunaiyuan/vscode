'''
Author: your name
Date: 2021-01-30 00:23:47
LastEditTime: 2021-02-03 18:06:07
LastEditors: Please set LastEditors
Description: In User Settings Edit
FilePath: r/Desktopd:/.git/vscode/yundongyuanguanlixitong/Ui_mainui.py
'''
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:/.git/vscode/mainui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
###############################################
import sys
from threading import Thread
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import time
import json


###############################################
class Ui_ResetPassword(object):
    def setupUi(self, ResetPassword):
        ResetPassword.setObjectName("ResetPassword")
        ResetPassword.resize(389, 171)
        self.lineEdit = QtWidgets.QLineEdit(ResetPassword)
        self.lineEdit.setGeometry(QtCore.QRect(110, 80, 161, 21))
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(ResetPassword)
        self.label.setGeometry(QtCore.QRect(20, 80, 91, 16))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(ResetPassword)
        self.pushButton.setGeometry(QtCore.QRect(280, 80, 75, 23))
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi(ResetPassword)
        QtCore.QMetaObject.connectSlotsByName(ResetPassword)
        self.password = ''

    def retranslateUi(self, ResetPassword):
        _translate = QtCore.QCoreApplication.translate
        ResetPassword.setWindowTitle(_translate("ResetPassword", "重置密码"))
        self.label.setText(_translate("ResetPassword", "请输入新密码："))
        self.pushButton.setText(_translate("ResetPassword", "确定"))


class Ui_AskRe(object):
    def setupUi(self, AskRe):
        AskRe.setObjectName("AskRe")
        AskRe.resize(342, 218)
        self.label = QtWidgets.QLabel(AskRe)
        self.label.setGeometry(QtCore.QRect(20, 10, 281, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(AskRe)
        self.pushButton.setGeometry(QtCore.QRect(20, 160, 75, 23))
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(AskRe)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 160, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(AskRe)
        self.pushButton_3.setGeometry(QtCore.QRect(240, 160, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit = QtWidgets.QLineEdit(AskRe)
        self.lineEdit.setGeometry(QtCore.QRect(100, 80, 151, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(AskRe)
        self.label_2.setGeometry(QtCore.QRect(20, 60, 51, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.qestion = 0
        self.retranslateUi(AskRe)
        QtCore.QMetaObject.connectSlotsByName(AskRe)

        self.result = {}
        self.cout = 0
        self.finsh = False

    def retranslateUi(self, AskRe):
        self.AskRe = AskRe
        _translate = QtCore.QCoreApplication.translate
        AskRe.setWindowTitle(_translate("AskRe", "Dialog"))
        self.label.setText(_translate("AskRe", "项目："))
        self.pushButton.setText(_translate("AskRe", "下一项"))
        self.pushButton.clicked[bool].connect(self.get_ask)
        self.pushButton_2.setText(_translate("AskRe", "上一项"))
        self.pushButton_2.clicked[bool].connect(self.last)
        self.pushButton_3.setText(_translate("AskRe", "全部取消"))
        self.pushButton_3.clicked[bool].connect(self.AskRe.close)
        self.label_2.setText(_translate("AskRe", "成绩："))

    def last(self):
        self.qestion -= 2
        if self.qestion < 0:
            self.qestion = 0
            self.cout = 0
        self.get_ask()

    def get_ask(self):
        print(self.qestion)
        if self.cout == 0:
            self.text = xm[self.qestion]
            self.label.setText(f'{self.text}')
            self.cout += 1
        else:
            anwser = self.lineEdit.text()
            try:
                anwser = float(anwser)

                self.result[self.text] = anwser
                self.qestion += 1
                self.text = xm[self.qestion]
                self.label.setText(f'{self.text}')
            except IndexError as e:

                self.AskRe.close()
                print(self.result)
                self.finsh = True
            except Exception as e:

                msg_box = QMessageBox(QMessageBox.Warning, '警告', '格式错误！')
                msg_box.exec_()


class Ui_PlayerType(object):
    def setupUi(self, PlayerType):
        PlayerType.setObjectName("PlayerType")
        PlayerType.resize(360, 196)
        self.pushButton = QtWidgets.QPushButton(PlayerType)
        self.pushButton.setGeometry(QtCore.QRect(60, 130, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(PlayerType)
        self.pushButton_2.setGeometry(QtCore.QRect(190, 130, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(PlayerType)
        self.label.setGeometry(QtCore.QRect(70, 30, 231, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(36)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.retranslateUi(PlayerType)
        QtCore.QMetaObject.connectSlotsByName(PlayerType)

    def retranslateUi(self, PlayerType):
        _translate = QtCore.QCoreApplication.translate
        PlayerType.setWindowTitle(_translate("PlayerType", "Dialog"))
        self.pushButton.setText(_translate("PlayerType", "球员"))
        #self.pushButton.clicked[bool].connect(p1)
        self.pushButton_2.setText(_translate("PlayerType", "守门员"))
        # self.pushButton.clicked[bool].connect(p2)
        self.label.setText(_translate("PlayerType", "球员身份"))


class Ui_Change(object):
    def setupUi(self, Change):
        Change.setObjectName("Change")
        Change.resize(365, 139)
        self.comboBox = QtWidgets.QComboBox(Change)
        self.comboBox.setGeometry(QtCore.QRect(70, 50, 69, 22))
        self.comboBox.setObjectName("comboBox")
        self.label = QtWidgets.QLabel(Change)
        self.label.setGeometry(QtCore.QRect(20, 50, 54, 12))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Change)
        self.lineEdit.setGeometry(QtCore.QRect(160, 50, 113, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Change)
        self.pushButton.setGeometry(QtCore.QRect(260, 90, 75, 23))
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi(Change)
        QtCore.QMetaObject.connectSlotsByName(Change)

    def retranslateUi(self, Change):
        _translate = QtCore.QCoreApplication.translate
        Change.setWindowTitle(_translate("Change", "Dialog"))
        self.label.setText(_translate("Change", "项目："))
        self.pushButton.setText(_translate("Change", "确认"))


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(486, 326)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 221, 81))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(22)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 160, 81, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(140, 160, 81, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(250, 160, 81, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(360, 160, 81, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 230, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(140, 230, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        #self.username = ''
        self.result = {}
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "运动员管理系统"))

        self.pushButton.setText(_translate("MainWindow", "录入成绩"))
        self.pushButton.clicked[bool].connect(self.luru)
        self.pushButton_2.setText(_translate("MainWindow", "修改成绩"))
        self.pushButton_2.clicked[bool].connect(self.change)
        self.pushButton_3.setText(_translate("MainWindow", "删除成绩"))
        self.pushButton_3.clicked[bool].connect(self.dellet)
        self.pushButton_4.setText(_translate("MainWindow", "查看成绩"))
        self.pushButton_4.clicked[bool].connect(self.check)
        self.pushButton_5.setText(_translate("MainWindow", "重置密码"))
        self.pushButton_5.clicked[bool].connect(self.resetpassword)
        self.pushButton_6.setText(_translate("MainWindow", "制作表格"))
        self.pushButton_6.clicked[bool].connect(self.zhibiao)

    def dellet(self):
        self.loaddata()
        del self.all_result[self.username]
        with open('./data/data.txt', 'w') as t:
            a = json.dumps(self.all_result)
            t.write(a)

    def resetpassword(self):
        self.rp_ui = QDialog()
        self.ui_rp = Ui_ResetPassword()
        self.ui_rp.setupUi(self.rp_ui)
        self.rp_ui.show()
        self.ui_rp.pushButton.clicked[bool].connect(self.sureresetpassword)

    def sureresetpassword(self):
        self.password = self.ui_rp.lineEdit.text()
        self.rp_ui.close()

        with open('./data/user.txt', "r") as t:
            user_json = json.loads(t.read())
            user_json[self.username] = self.password
            a = json.dumps(user_json)
        with open('./data/user.txt', "w") as t:
            t.write(a)
            msg_box = QMessageBox(QMessageBox.Warning, '提示！', '更改完成！')
            msg_box.exec_()

    def change(self):
        try:
            with open('./data/data.txt', 'r') as t:
                self.all_result = json.loads(t.read())
                self.result = self.all_result[self.username]
                self.c_win = QDialog()
                self.ui_c = Ui_Change()
                self.ui_c.setupUi(self.c_win)
                self.c_win.show()
                xiangmu = [[
                    '握力器（右）', '握力器（左）', '躺举杠铃', '曲臂悬垂', '仰卧起坐', '引体向上', '模拟滑行',
                    '八字滑行（不带球）（秒）', '八字滑行（带球）（秒）', '射门', "6圈（分钟）", '折线滑（秒）'
                ],
                           [
                               '十字（秒)', '三点（秒）', '传球', '侧躺（30°）', '握力器（右）',
                               '握力器（左）', '躺举杠铃', '引体向上', '仰卧起坐', '曲臂悬垂', '模拟滑行'
                           ]]
                global xm
                if self.result['球员类型'] == "球员":
                    xm = xiangmu[0]
                else:
                    xm = xiangmu[1]
                self.ui_c.comboBox.addItems(xm)
                self.ui_c.comboBox.resize(self.ui_c.comboBox.sizeHint())
                xuanzhongxm = self.ui_c.comboBox.currentText()

            def sure():
                print(1)
                v = self.ui_c.lineEdit.text()
                try:
                    v = float(v)
                except:
                    msg_box = QMessageBox(QMessageBox.Warning, '提示！',
                                          '格式错误请重新输入！')

                    msg_box.exec_()

                self.c_win.close()

                self.all_result[self.username][xuanzhongxm] = v
                print(self.all_result)
                with open('./data/data.txt', 'w') as t:
                    a = json.dumps(self.all_result)

                    t.write(a)
                    msg_box = QMessageBox(QMessageBox.Warning, '提示！', '修改成功')

                    msg_box.exec_()

            self.ui_c.pushButton.clicked[bool].connect(sure)

        except Exception as e:
            print(e)
            msg_box = QMessageBox(QMessageBox.Warning, '提示！', '还没有数据！')
            msg_box.exec_()

    def zhibiao(self):
        import xlwt
        book = xlwt.Workbook()

        #制作表头1
        sht1 = book.add_sheet("sheet1")
        sht1.write_merge(0, 1, 0, 0, "№")

        sht1.write_merge(0, 1, 1, 1, "姓名")

        sht1.write_merge(0, 0, 2, 3, '握力器')
        sht1.write_merge(0, 0, 4, 5, '躺举杠铃')
        sht1.write_merge(0, 0, 6, 7, '曲臂悬垂')
        sht1.write(0, 8, '仰卧起坐')
        sht1.write(0, 9, '引体向上')
        sht1.write(0, 10, '模拟滑行')

        sht1.write(1, 2, '左')
        sht1.write(1, 3, '右')
        sht1.write_merge(1, 1, 4, 5, '成绩')
        sht1.write_merge(1, 1, 6, 7, '成绩')
        sht1.write(1, 8, '成绩')
        sht1.write(1, 9, '成绩')
        sht1.write(1, 10, '成绩')
        #制作表头2
        sht2 = book.add_sheet("sheet2")
        sht2.write_merge(0, 2, 0, 0, "№")
        sht2.write_merge(0, 2, 1, 1, "姓名")
        sht2.write(0, 2, '8字滑行')
        sht2.write(0, 3, '8字滑行')
        sht2.write_merge(0, 1, 4, 4, '射门')
        sht2.write(0, 5, '6圈')
        sht2.write(0, 6, '折线滑')
        sht2.write(1, 2, '（不带球）（秒）')
        sht2.write(1, 3, '（带球）（秒）')
        sht2.write(1, 5, '（分钟）')
        sht2.write(1, 6, '（秒）')
        for t in range(2, 7):
            sht2.write(2, t, '成绩')
        #制作表头3
        sht3 = book.add_sheet("sheet3")
        sht3.write_merge(0, 1, 0, 0, "№")
        sht3.write_merge(0, 1, 1, 1, "姓名")
        sht3.write(0, 2, '十字（秒')
        sht3.write(0, 3, '三点（秒')
        sht3.write(0, 4, '传球')
        sht3.write(0, 5, '侧躺')
        sht3.write(0, 6, '积分数')
        sht3.write(0, 7, '评分')
        for t in range(2, 6):
            sht3.write(1, t, '成绩')

        #制作表头4
        sht4 = book.add_sheet("sheet4")
        sht4.write_merge(0, 1, 0, 0, "№")
        sht4.write_merge(0, 1, 1, 1, "姓名")
        sht4.write_merge(0, 0, 2, 3, "握力器")
        sht4.write(0, 4, '躺举杠铃')
        sht4.write(0, 5, '引体向上')
        sht4.write(0, 6, '仰卧起坐')
        sht4.write(0, 7, '曲臂悬垂')
        sht4.write(0, 8, '模拟滑行')
        sht4.write_merge(0, 0, 9, 10, "积分")
        sht4.write_merge(0, 0, 11, 12, "评分")
        sht4.write(1, 2, '左')
        sht4.write(1, 3, '右')
        for t in range(4, 9):
            sht4.write(1, t, '成绩')
        #填入数据
        with open('./data/data.txt', 'r') as t:
            all_result = json.loads(t.read())
        row = 2
        no = 1
        for k, v in all_result.items():
            if v['球员类型'] == '球员':
                #填入表1数据
                sht1.write(row, 0, no)
                sht1.write(row, 1, k)
                line = 2
                for xm in xiangmu[0][:7]:
                    if line == 4:
                        sht1.write_merge(row, row, 4, 5, v['躺举杠铃'])
                        sht1.write_merge(row, row, 6, 7, v['曲臂悬垂'])
                        line += 3
                    else:
                        sht1.write(row, line, v[xm])
                    line += 1
                row += 1

                #填入表2数据
                sht2.write(row, 0, no)
                sht2.write(row, 1, k)

                line = 2
                for xm in xiangmu[0][7:]:
                    sht2.write(row, line, v[xm])
                    line += 1
                no += 1
            elif v['球员类型'] == '守门员':
                #填入表3数据
                sht3.write(row, 0, no)
                sht3.write(row, 1, k)
                line = 2
                for xm in xiangmu[2][:4]:
                    sht3.write(row, line, v[xm])
                    line += 1
                #填入表4数据
                sht4.write(row, 0, no)
                sht4.write(row, 1, k)
                line = 2
                for xm in xiangmu[2][4:]:
                    sht4.write(row, line, v[xm])
                    line += 1

        book.save("成绩测试.xlsx")

    def check(self):
        try:
            with open('./data/data.txt', 'r') as t:
                self.all_result = json.loads(t.read())
                self.result = self.all_result[self.username]

            from HTMLTable import HTMLTable
            table1 = HTMLTable(caption='运动员管理系统（球员）')
            table2 = HTMLTable(caption='运动员管理系统（守门员）')
            tables = [table1, table2]
            for table in tables:

                # 标题样式
                table.caption.set_style({
                    'font-size': '34px',
                })
                # 表格样式，即<table>标签样式
                table.set_style({
                    'border-collapse': 'collapse',
                    'word-break': 'keep-all',
                    'white-space': 'nowrap',
                    'font-size': '18px',
                })
                # 统一设置所有单元格样式，<td>或<th>
                table.set_cell_style({
                    'border-color': '#000',
                    'border-width': '1px',
                    'border-style': 'hidden',
                    'padding': '10px',
                })
                # 表头样式
                table.set_header_row_style({
                    'color': '#fff',
                    'background-color': '#48a6fb',
                    'font-size': '34px',
                })
                """
                # 覆盖表头单元格字体样式
                table.set_header_cell_style({
                    'padding': '15px',
                })
                # 调小次表头字体大小
                table[1].set_cell_style({
                    'padding': '8px',
                    'font-size': '15px',
                }) """

            # 表头行
            table1.append_header_rows(
                (('№  ', '姓名  ', '握力器 ', '', '躺举杠铃', '曲臂悬垂', '仰卧起坐', '引体向上',
                  '模拟滑行', '8字滑行', '8字滑行', '射门  ', '6圈  ', '折线滑 '),
                 ('', '', '右 ', '左 ', '成绩', '成绩', '成绩', '成绩', '（不带球）（秒）',
                  '（带球）（秒）', '成绩', '分钟', '秒')))
            table1[0][2].attr.colspan = 2
            table1[0][0].attr.rowspan = 2
            table1[0][1].attr.rowspan = 2
            #print(self.username)
            #res = self.result.values()

            #print(*self.result.values())
            #print(list(self.result.values())[1:])
            #print(self.result)
            res = ["1", self.username]
            print(self.all_result)
            for tx in list(self.result.values())[1:]:
                print(tx)
                res.append(str(tx))

            res = tuple(res)
            #print(res)
            #(*res), ("1"))
            table1.append_data_rows(((res), ('')))
        except Exception as e:
            print(e)
            msg_box = QMessageBox(QMessageBox.Warning, '警告', '你还没有数据！')
            msg_box.exec_()

        html = table1.to_html()
        print(html)

    def p1(self):
        self.result['球员类型'] = '球员'
        self.pt_ui.close()
        self.lurushuju()

    def p2(self):
        self.result['球员类型'] = '守门员'

        self.pt_ui.close()
        self.lurushuju()

    def playertype(self):
        self.pt_ui = QDialog()
        self.ui_pt = Ui_PlayerType()
        self.ui_pt.setupUi(self.pt_ui)
        self.pt_ui.show()
        self.ui_pt.pushButton.clicked[bool].connect(self.p1)
        self.ui_pt.pushButton_2.clicked[bool].connect(self.p2)

    def lurushuju(self):
        print(self.result)
        xiangmu = [[
            '握力器（右）', '握力器（左）', '躺举杠铃', '曲臂悬垂', '仰卧起坐', '引体向上', '模拟滑行',
            '八字滑行（不带球）（秒）', '八字滑行（带球）（秒）', '射门', "6圈（分钟）", '折线滑（秒）'
        ],
                   [
                       '十字（秒)', '三点（秒）', '传球', '侧躺（30°）', '握力器（右）', '握力器（左）',
                       '躺举杠铃', '引体向上', '仰卧起坐', '曲臂悬垂', '模拟滑行'
                   ]]
        global xm
        if self.result['球员类型'] == "球员":
            xm = xiangmu[0]
        else:
            xm = xiangmu[1]
        self.ar_ui = QDialog()
        self.ui_ar = Ui_AskRe()
        self.ui_ar.setupUi(self.ar_ui)
        self.ar_ui.show()
        self.ui_ar.get_ask()

        def jiance():
            while not self.ui_ar.finsh:
                time.sleep(0.1)
            for k, v in self.ui_ar.result.items():
                self.result[k] = v

            print(f'完成{self.result}')
            self.localdata()

        Thread(target=jiance).start()

    def loaddata(self):
        try:
            with open('./data/data.txt', 'r') as t:
                self.all_result = json.loads(t.read())
                self.result = self.all_result[self.username]
        except:
            self.all_result = {}

    def localdata(self):
        self.loaddata()
        self.all_result[self.username] = self.result
        with open('./data/data.txt', 'w') as t:
            a = json.dumps(self.all_result)
            t.write(a)

    def luru(self):

        self.playertype()

    def get_username(self, name):
        self.username = name
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("MainWindow", f"欢迎您！{self.username}！"))


app = QApplication(sys.argv)
mainui = QMainWindow()
ui_2 = Ui_MainWindow()
ui_2.setupUi(mainui)

ui_2.get_username('b')
mainui.show()
sys.exit(app.exec_())
